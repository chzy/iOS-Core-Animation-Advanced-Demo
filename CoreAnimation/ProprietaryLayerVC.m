//
//  ProprietaryLayer.m
//  CoreAnimationDemo
//
//  Created by Êù®Êò•Ëá≥ on 16/9/11.
//  Copyright ¬© 2016Âπ¥ com.hofon. All rights reserved.
//

#import "ProprietaryLayerVC.h"
#import <CoreText/CoreText.h>
#import <QuartzCore/QuartzCore.h>
#import <GLKit/GLKit.h>
#import "GAEGLLayer.h"
#import <AVFoundation/AVFoundation.h>

@interface ProprietaryTableCell: UITableViewCell
@property (weak, nonatomic) IBOutlet UILabel *infoLb;

@end
@implementation ProprietaryTableCell
- (void)awakeFromNib{
    [super awakeFromNib];
    
}

@end
@interface ProprietaryLayerVC ()<UITableViewDelegate,UITableViewDataSource>
@property (weak, nonatomic) IBOutlet UITableView *tableView;
@property (nonatomic,strong)NSMutableArray *dataSource;
@property (weak, nonatomic) IBOutlet UIView *backgroundView;
@property (nonatomic,strong) UIScrollView *scrollView;
@end
@implementation ProprietaryLayerVC
- (void)viewDidLoad{
    [super viewDidLoad];
    [self.dataSource addObject:@"CAShapLayer"];
    [self.dataSource addObject:@"CAtextLayer"];
    [self.dataSource addObject:@"RichText"];
    [self.dataSource addObject:@"CAGradientLayer"];
    [self.dataSource addObject:@"CAReplicatorLayer"];
    [self.dataSource addObject:@"CAScrollLayer"];
    [self.dataSource addObject:@"CATiledLayer"];
    [self.dataSource addObject:@"CAEmitterLayer"];
    [self.dataSource addObject:@"CAEAGLLayer"];
    [self.dataSource addObject:@"AVPlayerLayer"];
//    self.automaticallyAdjustsScrollViewInsets  = NO;
}
CATiledLayer *tileLayer;
#pragma mark =====================APPDelegate==========================
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    
    //ÂéªÈô§tileLayerÁöÑ‰ª£ÁêÜÈò≤Ê≠¢Â¥©Ê∫É
    if (tileLayer) {
        [self.scrollView removeFromSuperview];
        tileLayer.delegate = nil;
        [tileLayer removeFromSuperlayer];
        tileLayer = nil;
    }
    for (int i = 0 ; i < self.backgroundView.layer.sublayers.count; i ++) {
        
            [(CALayer *) self.backgroundView.layer.sublayers[i] removeFromSuperlayer];
        
    }
//    [self.scrollView removeFromSuperview];
   
    switch (indexPath.row) {
        case 0:
        {
            [self addShapeLayer];
        }
            break;
        case 1:
        {
            [self addTextLayer];
        }
            break;
        case 2:
        {
            [self addRichText];
        }
            break;
        case 3:{
            [self addGradient];
        }
            break;
        case 4:{
            [self addCAReplicatorLayer];
        }
            break;
        case 5:{
            [self addCAScrollLayer];
        }
            break;
        case 6:{
            [self addCATiledLayer];
            [self.backgroundView addSubview:self.scrollView];
        }
            break;
        case 7:{
            [self addCAEmitterLayer];
        }
            break;
        case 8:{
            [self addCAEAGLLayer];
        }
            break;
        case 9:{
            [self addAVPlayerLayer];
        }
            break;
        default:
            break;
    }
    
}
//ShapeLayer
- (void)addShapeLayer{
    UIBezierPath *path = [[UIBezierPath alloc] init];

    [path addArcWithCenter:CGPointMake(150, 100) radius:25 startAngle:0 endAngle:2*M_PI clockwise:YES];
    [path moveToPoint:CGPointMake(150, 125)];
    [path addLineToPoint:CGPointMake(150, 175)];
    [path addLineToPoint:CGPointMake(125, 225)];
    [path moveToPoint:CGPointMake(150, 175)];
    [path addLineToPoint:CGPointMake(175, 225)];
    [path moveToPoint:CGPointMake(100, 150)];
    [path addLineToPoint:CGPointMake(200, 150)];
    
    //create shape layer
    CAShapeLayer *shapeLayer = [CAShapeLayer layer];
    shapeLayer.strokeColor = [UIColor redColor].CGColor;
    shapeLayer.fillColor = [UIColor clearColor].CGColor;
    shapeLayer.lineWidth = 10;
    shapeLayer.lineJoin = kCALineJoinRound;
    shapeLayer.lineCap = kCALineCapRound;
    shapeLayer.path = path.CGPath;
    //add it to our view
    [self.backgroundView.layer addSublayer:shapeLayer];
    /* ÊâøÊé•ËßÜËßâ VisionEffectionVC ÂèØ‰ª•ÂÅöÂõæËíôÁâà
    //mask
    CALayer *maskLayer = shapeLayer;
    UIImageView *imageView = [[UIImageView alloc]initWithFrame:self.backgroundView.frame];
    [self.view addSubview:imageView];
    UIImage *maskImage = [UIImage imageNamed:@"Test"];
    imageView.image = maskImage;
    maskLayer.contents = (__bridge id)maskImage.CGImage;
    
    //apply mask to image layerÔøº
    imageView.layer.mask = maskLayer;
    */
    
}
//TextShapeLayer
- (void)addTextLayer{
    CATextLayer *textLayer = [CATextLayer layer];
    textLayer.frame = self.backgroundView.bounds;
    [self.backgroundView.layer addSublayer:textLayer];
    
    //set text attributes
    textLayer.foregroundColor = [UIColor redColor].CGColor;
    textLayer.alignmentMode = kCAAlignmentJustified;
    textLayer.wrapped = YES;
    
    //choose a font
    UIFont *font = [UIFont systemFontOfSize:15];
    
    //set layer font
    CFStringRef fontName = (__bridge CFStringRef)font.fontName;
    CGFontRef fontRef = CGFontCreateWithFontName(fontName);
    textLayer.font = fontRef;
    textLayer.fontSize = font.pointSize;
    CGFontRelease(fontRef);
    
    //choose some text
    NSString *text = @"Lorem ipsum dolor sit amet, consectetur adipiscing \n elit. Quisque massa arcu, eleifend vel varius in, facilisis pulvinar  leo. Nunc quis nunc at mauris pharetra condimentum ut ac neque. Nunc elementum, \nlibero ut porttitor dictum,üòÜ\n diam odio congue lacus, vel  fringilla sapien diam at purus. Etiam suscipit pretium nunc sit amet  lobortis";
    
    //set layer text
    textLayer.string = text;
    /*
     `CATextLayer`ÁöÑ`font`Â±ûÊÄß‰∏çÊòØ‰∏Ä‰∏™`UIFont`Á±ªÂûãÔºåËÄåÊòØ‰∏Ä‰∏™`CFTypeRef`Á±ªÂûã„ÄÇËøôÊ†∑ÂèØ‰ª•Ê†πÊçÆ‰Ω†ÁöÑÂÖ∑‰ΩìÈúÄË¶ÅÊù•ÂÜ≥ÂÆöÂ≠ó‰ΩìÂ±ûÊÄßÂ∫îËØ•ÊòØÁî®`CGFontRef`Á±ªÂûãËøòÊòØ`CTFontRef`Á±ªÂûãÔºàCore TextÂ≠ó‰ΩìÔºâ„ÄÇÂêåÊó∂Â≠ó‰ΩìÂ§ßÂ∞è‰πüÊòØÁî®`fontSize`Â±ûÊÄßÂçïÁã¨ËÆæÁΩÆÁöÑÔºåÂõ†‰∏∫`CTFontRef`Âíå`CGFontRef`Âπ∂‰∏çÂÉèUIFont‰∏ÄÊ†∑ÂåÖÂê´ÁÇπÂ§ßÂ∞è„ÄÇËøô‰∏™‰æãÂ≠ê‰ºöÂëäËØâ‰Ω†Â¶Ç‰ΩïÂ∞Ü`UIFont`ËΩ¨Êç¢Êàê`CGFontRef`„ÄÇ
     
     Âè¶Â§ñÔºå`CATextLayer`ÁöÑ`string`Â±ûÊÄßÂπ∂‰∏çÊòØ‰Ω†ÊÉ≥Ë±°ÁöÑ`NSString`Á±ªÂûãÔºåËÄåÊòØ`id`Á±ªÂûã„ÄÇËøôÊ†∑‰Ω†Êó¢ÂèØ‰ª•Áî®`NSString`‰πüÂèØ‰ª•Áî®`NSAttributedString`Êù•ÊåáÂÆöÊñáÊú¨‰∫ÜÔºàÊ≥®ÊÑèÔºå`NSAttributedString`Âπ∂‰∏çÊòØ`NSString`ÁöÑÂ≠êÁ±ªÔºâ„ÄÇÂ±ûÊÄßÂåñÂ≠óÁ¨¶‰∏≤ÊòØiOSÁî®Êù•Ê∏≤ÊüìÂ≠ó‰ΩìÈ£éÊ†ºÁöÑÊú∫Âà∂ÔºåÂÆÉ‰ª•ÁâπÂÆöÁöÑÊñπÂºèÊù•ÂÜ≥ÂÆöÊåáÂÆöËåÉÂõ¥ÂÜÖÁöÑÂ≠óÁ¨¶‰∏≤ÁöÑÂéüÂßã‰ø°ÊÅØÔºåÊØîÂ¶ÇÂ≠ó‰ΩìÔºåÈ¢úËâ≤ÔºåÂ≠óÈáçÔºåÊñú‰ΩìÁ≠â„ÄÇ
    Â¶Ç‰∏ãÂØåÊñáÊú¨„ÄÇ„ÄÇ„ÄÇ„ÄÇ„ÄÇ
     */
    
    //for retina screen
    textLayer.contentsScale = [UIScreen mainScreen].scale;
}
//ÂØåÊñáÊú¨
- (void)addRichText{
    
    CATextLayer *textLayer = [CATextLayer layer];
    textLayer.frame = self.backgroundView.bounds;
    textLayer.contentsScale = [UIScreen mainScreen].scale;
    [self.backgroundView.layer addSublayer:textLayer];
    
    //set text attributes
    textLayer.alignmentMode = kCAAlignmentJustified;
    textLayer.wrapped = YES;
    
    //choose a font
    UIFont *font = [UIFont systemFontOfSize:15];
    
    //choose some text
    NSString *text = @"Lorem ipsum dolor sit amet, consectetur adipiscing \n elit. Quisque massa arcu, eleifend vel varius in, facilisis pulvinar \n leo. Nunc quis nunc at mauris pharetra condimentum ut ac neque. Nunc \n elementum, libero ut porttitor dictum, diam odio congue lacus, vel \n fringilla sapien diam at purus. Etiam suscipit pretium nunc sit amet  lobortis";
    //create attributed string
    NSMutableAttributedString *string = nil;
    string = [[NSMutableAttributedString alloc] initWithString:text];
    
    //convert UIFont to a CTFont
    CFStringRef fontName = (__bridge CFStringRef)font.fontName;
    CGFloat fontSize = font.pointSize;
    CTFontRef fontRef = CTFontCreateWithName(fontName, fontSize, NULL);
    
    //set text attributes
    NSDictionary *attribs = @{
                              (__bridge id)kCTForegroundColorAttributeName:(__bridge id)[UIColor blackColor].CGColor,
                              (__bridge id)kCTFontAttributeName: (__bridge id)fontRef
                              };
    
    [string setAttributes:attribs range:NSMakeRange(0, [text length])];
    attribs = @{
                (__bridge id)kCTForegroundColorAttributeName: (__bridge id)[UIColor redColor].CGColor,
                (__bridge id)kCTUnderlineStyleAttributeName: @(kCTUnderlineStyleSingle),
                (__bridge id)kCTFontAttributeName: (__bridge id)fontRef
                };
    [string setAttributes:attribs range:NSMakeRange(6, 5)];
    
    //release the CTFont we created earlier
    CFRelease(fontRef);
    
    //set layer text
    textLayer.string = string;
}
//CAGradientLayer Ê¢ØÂ∫¶Ê∏êÂèò
- (void)addGradient{
    
    CAGradientLayer *layer = [CAGradientLayer layer];
    layer.frame = self.backgroundView.bounds;
    layer.colors = @[(__bridge id)[UIColor redColor].CGColor,(__bridge id)[UIColor yellowColor].CGColor,(__bridge id)[UIColor purpleColor].CGColor];
    [self.backgroundView.layer addSublayer:layer];
    //ÂèòÊç¢ÂºÄÂßãÁÇπÂíåÁªìÊùüÁÇπÔºàËåÉÂõ¥ÊØî‰æãÔºâ
    layer.startPoint = CGPointMake(0, 0);
    layer.endPoint = CGPointMake(0.25, 0.75);
    layer.locations = @[@0.0,@0.5,@0.8];
}
//ÈáçÂ§çÂõæÂ±Ç
- (void)addCAReplicatorLayer{
    CAReplicatorLayer *replicator = [CAReplicatorLayer layer];
    replicator.frame = self.backgroundView.bounds;
    [self.backgroundView.layer addSublayer:replicator];
    
    //configure the replicator
    replicator.instanceCount = 10;
    
    //Áõ∏ÂΩì‰∫éÂÅöinstanceCountÈÅç‰ª•‰∏ãÈÄíÂΩí
    //apply a transform for each instance
    CATransform3D transform = CATransform3DIdentity;
//    transform = CATransform3DTranslate(transform, 0, 60.0f+2, -60);
    transform = CATransform3DRotate(transform, M_PI_2/5, 0, 1, 1);
    transform.m34 = -1.0 / 1000.0;
    replicator.instanceTransform = transform;
    
    //apply a color shift for each instance
    replicator.instanceBlueOffset = -0.1;
    replicator.instanceGreenOffset = -0.1;
    replicator.instanceRedOffset = -0.1;
    replicator.instanceAlphaOffset = -0.01;
    
    //create a sublayer and place it inside the replicator
    CALayer *layer = [CALayer layer];
    layer.frame = CGRectMake(100.0f, 100.0f, 100.0f, 100.0f);
    layer.backgroundColor = [UIColor whiteColor].CGColor;
    
    [replicator addSublayer:layer];
    
}
//ÂèØÊªëÂä®ÂõæÂ±Ç
CAScrollLayer *textlayer;

- (void)addCAScrollLayer{
    textlayer = [CAScrollLayer layer];
    textlayer.frame = self.backgroundView.bounds;
    self.backgroundView.layer.masksToBounds = YES;
//    textlayer.affineTransform = CGAffineTransformTranslate(textlayer.affineTransform, 300, textlayer.frame.origin.y);
    
    CALayer *contentLayer =[CALayer layer];
    contentLayer.frame = CGRectMake(10, 10, 400, 800);
    contentLayer.contents = (__bridge id _Nullable)([UIImage imageNamed:@"Test"].CGImage);
    [self.backgroundView.layer addSublayer:textlayer];
    [textlayer addSublayer:contentLayer];
    
    
    textlayer.contentsGravity = kCAGravityBottomRight;
    textlayer.scrollMode = kCAScrollBoth;
    UIPanGestureRecognizer *recognizer = nil;
    recognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan:)];
    [self.backgroundView addGestureRecognizer:recognizer];
}
- (void)pan:(UIPanGestureRecognizer *)recognizer
{
    CGPoint translation = [recognizer translationInView:self.view];
    CGPoint origin = textlayer.bounds.origin;
    origin = CGPointMake(origin.x - translation.x, origin.y - translation.y);
    [textlayer scrollToPoint:origin];
    [recognizer setTranslation:CGPointZero inView:self.view];
    
}
//addCATiledLayer
- (void)addCATiledLayer{
    /*
     Êúâ‰∫õÊó∂ÂÄô‰Ω†ÂèØËÉΩÈúÄË¶ÅÁªòÂà∂‰∏Ä‰∏™ÂæàÂ§ßÁöÑÂõæÁâáÔºåÂ∏∏ËßÅÁöÑ‰æãÂ≠êÂ∞±ÊòØ‰∏Ä‰∏™È´òÂÉèÁ¥†ÁöÑÁÖßÁâáÊàñËÄÖÊòØÂú∞ÁêÉË°®Èù¢ÁöÑËØ¶ÁªÜÂú∞Âõæ„ÄÇiOSÂ∫îÁî®ÈÄöÁïÖËøêË°åÂú®ÂÜÖÂ≠òÂèóÈôêÁöÑËÆæÂ§á‰∏äÔºåÊâÄ‰ª•ËØªÂèñÊï¥‰∏™ÂõæÁâáÂà∞ÂÜÖÂ≠ò‰∏≠ÊòØ‰∏çÊòéÊô∫ÁöÑ„ÄÇËΩΩÂÖ•Â§ßÂõæÂèØËÉΩ‰ºöÁõ∏ÂΩìÂú∞ÊÖ¢ÔºåÈÇ£‰∫õÂØπ‰Ω†Áúã‰∏äÂéªÊØîËæÉÊñπ‰æøÁöÑÂÅöÊ≥ïÔºàÂú®‰∏ªÁ∫øÁ®ãË∞ÉÁî®`UIImage`ÁöÑ`-imageNamed:`ÊñπÊ≥ïÊàñËÄÖ`-imageWithContentsOfFile:`ÊñπÊ≥ïÔºâÂ∞Ü‰ºöÈòªÂ°û‰Ω†ÁöÑÁî®Êà∑ÁïåÈù¢ÔºåËá≥Â∞ë‰ºöÂºïËµ∑Âä®ÁîªÂç°È°øÁé∞Ë±°„ÄÇ
     
     ËÉΩÈ´òÊïàÁªòÂà∂Âú®iOS‰∏äÁöÑÂõæÁâá‰πüÊúâ‰∏Ä‰∏™Â§ßÂ∞èÈôêÂà∂„ÄÇÊâÄÊúâÊòæÁ§∫Âú®Â±èÂπï‰∏äÁöÑÂõæÁâáÊúÄÁªàÈÉΩ‰ºöË¢´ËΩ¨Âåñ‰∏∫OpenGLÁ∫πÁêÜÔºåÂêåÊó∂OpenGLÊúâ‰∏Ä‰∏™ÊúÄÂ§ßÁöÑÁ∫πÁêÜÂ∞∫ÂØ∏ÔºàÈÄöÂ∏∏ÊòØ2048\*2048ÔºåÊàñ4096\*4096ÔºåËøô‰∏™ÂèñÂÜ≥‰∫éËÆæÂ§áÂûãÂè∑Ôºâ„ÄÇÂ¶ÇÊûú‰Ω†ÊÉ≥Âú®Âçï‰∏™Á∫πÁêÜ‰∏≠ÊòæÁ§∫‰∏Ä‰∏™ÊØîËøôÂ§ßÁöÑÂõæÔºåÂç≥‰æøÂõæÁâáÂ∑≤ÁªèÂ≠òÂú®‰∫éÂÜÖÂ≠ò‰∏≠‰∫ÜÔºå‰Ω†‰ªçÁÑ∂‰ºöÈÅáÂà∞ÂæàÂ§ßÁöÑÊÄßËÉΩÈóÆÈ¢òÔºåÂõ†‰∏∫Core AnimationÂº∫Âà∂Áî®CPUÂ§ÑÁêÜÂõæÁâáËÄå‰∏çÊòØÊõ¥Âø´ÁöÑGPUÔºàËßÅÁ¨¨12Á´†„ÄéÈÄüÂ∫¶ÁöÑÊõ≤Ë∞É„ÄèÔºåÂíåÁ¨¨13Á´†„ÄéÈ´òÊïàÁªòÂõæ„ÄèÔºåÂÆÉÊõ¥Âä†ËØ¶ÁªÜÂú∞Ëß£Èáä‰∫ÜËΩØ‰ª∂ÁªòÂà∂ÂíåÁ°¨‰ª∂ÁªòÂà∂Ôºâ„ÄÇ
     
     `CATiledLayer`‰∏∫ËΩΩÂÖ•Â§ßÂõæÈÄ†ÊàêÁöÑÊÄßËÉΩÈóÆÈ¢òÊèê‰æõ‰∫Ü‰∏Ä‰∏™Ëß£ÂÜ≥ÊñπÊ°àÔºöÂ∞ÜÂ§ßÂõæÂàÜËß£ÊàêÂ∞èÁâáÁÑ∂ÂêéÂ∞Ü‰ªñ‰ª¨ÂçïÁã¨ÊåâÈúÄËΩΩÂÖ•„ÄÇ
     */
    tileLayer = [CATiledLayer layer];
    tileLayer.frame = CGRectMake(0, 0, 2048, 2048);
    tileLayer.delegate = self;
    [self.scrollView.layer addSublayer:tileLayer];
//    tileLayer.contents = (__bridge id _Nullable)([UIImage imageNamed:@"Test"].CGImage);
    //configure the scroll view
    tileLayer.contents = nil;
    self.scrollView.contentSize = tileLayer.frame.size;
    [self.scrollView.layer addSublayer:tileLayer];
//    self.scrollView.layer.contents = (__bridge id _Nullable)([UIImage imageNamed:@"Test"].CGImage);
    //draw layer
    [tileLayer setNeedsDisplay];
}
- (void)drawLayer:(CATiledLayer *)layer inContext:(CGContextRef)ctx
{
    //determine tile coordinate
    CGRect bounds = CGContextGetClipBoundingBox(ctx);
//    NSInteger x = floor(bounds.origin.x / layer.tileSize.width);
//    NSInteger y = floor(bounds.origin.y / layer.tileSize.height);
    
    //load tile image
//    NSString *imageName = [NSString stringWithFormat: @"Test", x, y];
//    NSString *imagePath = [[NSBundle mainBundle] pathForResource:imageName ofType:@"jpg"];
//    UIImage *tileImage = [UIImage imageWithContentsOfFile:imagePath];
    UIImage *tileImage = [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"ÂõæÁâá2" ofType:@"jpeg"]];
    //draw tile
    UIGraphicsPushContext(ctx);
    [tileImage drawInRect:bounds];
    UIGraphicsPopContext();
    UIGraphicsEndImageContext();
}
//CAEmitterLayerÁ≤íÂ≠êÊïàÊûú
- (void)addCAEmitterLayer{
/*
 Âú®iOS 5‰∏≠ÔºåËãπÊûúÂºïÂÖ•‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑ`CALayer`Â≠êÁ±ªÂè´ÂÅö`CAEmitterLayer`„ÄÇ`CAEmitterLayer`ÊòØ‰∏Ä‰∏™È´òÊÄßËÉΩÁöÑÁ≤íÂ≠êÂºïÊìéÔºåË¢´Áî®Êù•ÂàõÂª∫ÂÆûÊó∂‰æãÂ≠êÂä®ÁîªÂ¶ÇÔºöÁÉüÈõæÔºåÁÅ´ÔºåÈõ®Á≠âÁ≠âËøô‰∫õÊïàÊûú„ÄÇ
 
 `CAEmitterLayer`Áúã‰∏äÂéªÂÉèÊòØËÆ∏Â§ö`CAEmitterCell`ÁöÑÂÆπÂô®ÔºåËøô‰∫õ`CAEmitierCell`ÂÆö‰πâ‰∫Ü‰∏Ä‰∏™‰æãÂ≠êÊïàÊûú„ÄÇ‰Ω†Â∞Ü‰ºö‰∏∫‰∏çÂêåÁöÑ‰æãÂ≠êÊïàÊûúÂÆö‰πâ‰∏Ä‰∏™ÊàñÂ§ö‰∏™`CAEmitterCell`‰Ωú‰∏∫Ê®°ÁâàÔºåÂêåÊó∂`CAEmitterLayer`Ë¥üË¥£Âü∫‰∫éËøô‰∫õÊ®°ÁâàÂÆû‰æãÂåñ‰∏Ä‰∏™Á≤íÂ≠êÊµÅ„ÄÇ‰∏Ä‰∏™`CAEmitterCell`Á±ª‰ºº‰∫é‰∏Ä‰∏™`CALayer`ÔºöÂÆÉÊúâ‰∏Ä‰∏™`contents`Â±ûÊÄßÂèØ‰ª•ÂÆö‰πâ‰∏∫‰∏Ä‰∏™`CGImage`ÔºåÂè¶Â§ñËøòÊúâ‰∏Ä‰∫õÂèØËÆæÁΩÆÂ±ûÊÄßÊéßÂà∂ÁùÄË°®Áé∞ÂíåË°å‰∏∫„ÄÇÊàë‰ª¨‰∏ç‰ºöÂØπËøô‰∫õÂ±ûÊÄßÈÄê‰∏ÄËøõË°åËØ¶ÁªÜÁöÑÊèèËø∞Ôºå‰Ω†‰ª¨ÂèØ‰ª•Âú®`CAEmitterCell`Á±ªÁöÑÂ§¥Êñá‰ª∂‰∏≠ÊâæÂà∞„ÄÇ
 */
    CAEmitterLayer *emitterLayer = [CAEmitterLayer layer];
    emitterLayer.frame = CGRectMake(self.view.frame.size.width/2 - 25, 150, 50, 50);
    emitterLayer.preservesDepth = YES;
    [self.backgroundView.layer addSublayer:emitterLayer];
    
    //configure emitter
    emitterLayer.renderMode = kCAEmitterLayerAdditive;
    emitterLayer.emitterPosition = CGPointMake(emitterLayer.frame.size.width / 2.0, emitterLayer.frame.size.height / 2.0);
    
    //create a particle template
    CAEmitterCell *cell = [[CAEmitterCell alloc] init];
    cell.contents = (__bridge id)[UIImage imageNamed:@"fire"].CGImage;
    //ÂêåÊó∂Â≠òÂú®Âá†‰∏™Á≤íÂ≠ê
    cell.birthRate = 6;
    //ÊØè‰∏Ä‰∏™Á≤íÂ≠êÁöÑÁîüÂëΩÊó∂Èó¥
    cell.lifetime = 2;
    //È¢úËâ≤ÂèòÊç¢
    cell.color = [UIColor colorWithRed:0.18 green:0.95 blue:0.91 alpha:1.0].CGColor;
    //ÈÄèÊòéÂ∫¶ÂèòÊç¢
    cell.alphaSpeed = -0.4;
    //ÁßªÂä®ÈÄüÂ∫¶
    cell.velocity = 100;
    cell.velocityRange = -50;
    // Á≤íÂ≠êÊüê‰∏ÄÂ±ûÊÄßÁöÑÂèòÂåñËåÉÂõ¥„ÄÇÊØîÂ¶Ç`emissionRange`Â±ûÊÄßÁöÑÂÄºÊòØ2œÄÔºåËøôÊÑèÂë≥ÁùÄÁ≤íÂ≠êÂèØ‰ª•‰ªé360Â∫¶‰ªªÊÑè‰ΩçÁΩÆÂèçÂ∞ÑÂá∫Êù•„ÄÇÂ¶ÇÊûúÊåáÂÆö‰∏Ä‰∏™Â∞è‰∏Ä‰∫õÁöÑÂÄºÔºåÂ∞±ÂèØ‰ª•ÂàõÈÄ†Âá∫‰∏Ä‰∏™ÂúÜÈî•ÂΩ¢„ÄÇ
    cell.emissionRange = M_PI * 2.0;
//    cell.emissionRange = -M_PI;
    //add particle template to emitter
    emitterLayer.emitterCells = @[cell];
    
}
- (void)addCAEAGLLayer{
    /*
     ÂΩìiOSË¶ÅÂ§ÑÁêÜÈ´òÊÄßËÉΩÂõæÂΩ¢ÁªòÂà∂ÔºåÂøÖË¶ÅÊó∂Â∞±ÊòØOpenGL„ÄÇÂ∫îËØ•ËØ¥ÂÆÉÂ∫îËØ•ÊòØÊúÄÂêéÁöÑÊùÄÊâãÈîèÔºåËá≥Â∞ëÂØπ‰∫éÈùûÊ∏∏ÊàèÁöÑÂ∫îÁî®Êù•ËØ¥ÊòØÁöÑ„ÄÇÂõ†‰∏∫Áõ∏ÊØîCore AnimationÂíåUIkitÊ°ÜÊû∂ÔºåÂÆÉ‰∏çÂèØÊÄùËÆÆÂú∞Â§çÊùÇ„ÄÇ
     
     OpenGLÊèê‰æõ‰∫ÜCore AnimationÁöÑÂü∫Á°ÄÔºåÂÆÉÊòØÂ∫ïÂ±ÇÁöÑCÊé•Âè£ÔºåÁõ¥Êé•ÂíåiPhoneÔºåiPadÁöÑÁ°¨‰ª∂ÈÄö‰ø°ÔºåÊûÅÂ∞ëÂú∞ÊäΩË±°Âá∫Êù•ÁöÑÊñπÊ≥ï„ÄÇOpenGLÊ≤°ÊúâÂØπË±°ÊàñÊòØÂõæÂ±ÇÁöÑÁªßÊâøÊ¶ÇÂøµ„ÄÇÂÆÉÂè™ÊòØÁÆÄÂçïÂú∞Â§ÑÁêÜ‰∏âËßíÂΩ¢„ÄÇOpenGL‰∏≠ÊâÄÊúâ‰∏úË•øÈÉΩÊòØ3DÁ©∫Èó¥‰∏≠ÊúâÈ¢úËâ≤ÂíåÁ∫πÁêÜÁöÑ‰∏âËßíÂΩ¢„ÄÇÁî®Ëµ∑Êù•ÈùûÂ∏∏Â§çÊùÇÂíåÂº∫Â§ßÔºå‰ΩÜÊòØÁî®OpenGLÁªòÂà∂iOSÁî®Êà∑ÁïåÈù¢Â∞±ÈúÄË¶ÅÂæàÂ§öÂæàÂ§öÁöÑÂ∑•‰Ωú‰∫Ü„ÄÇ
     
     ‰∏∫‰∫ÜËÉΩÂ§ü‰ª•È´òÊÄßËÉΩ‰ΩøÁî®Core AnimationÔºå‰Ω†ÈúÄË¶ÅÂà§Êñ≠‰Ω†ÈúÄË¶ÅÁªòÂà∂Âì™ÁßçÂÜÖÂÆπÔºàÁü¢ÈáèÂõæÂΩ¢Ôºå‰æãÂ≠êÔºåÊñáÊú¨ÔºåÁ≠âÁ≠âÔºâÔºå‰ΩÜÂêéÈÄâÊã©ÂêàÈÄÇÁöÑÂõæÂ±ÇÂéªÂëàÁé∞Ëøô‰∫õÂÜÖÂÆπÔºåCore Animation‰∏≠Âè™Êúâ‰∏Ä‰∫õÁ±ªÂûãÁöÑÂÜÖÂÆπÊòØË¢´È´òÂ∫¶‰ºòÂåñÁöÑÔºõÊâÄ‰ª•Â¶ÇÊûú‰Ω†ÊÉ≥ÁªòÂà∂ÁöÑ‰∏úË•øÂπ∂‰∏çËÉΩÊâæÂà∞Ê†áÂáÜÁöÑÂõæÂ±ÇÁ±ªÔºåÊÉ≥Ë¶ÅÂæóÂà∞È´òÊÄßËÉΩÂ∞±ÊØîËæÉË¥π‰∫ãÊÉÖ‰∫Ü„ÄÇ
     
     Âõ†‰∏∫OpenGLÊ†πÊú¨‰∏ç‰ºöÂØπ‰Ω†ÁöÑÂÜÖÂÆπËøõË°åÂÅáËÆæÔºåÂÆÉËÉΩÂ§üÁªòÂà∂ÂæóÁõ∏ÂΩìÂø´„ÄÇÂà©Áî®OpenGLÔºå‰Ω†ÂèØ‰ª•ÁªòÂà∂‰ªª‰Ωï‰Ω†Áü•ÈÅìÂøÖË¶ÅÁöÑÈõÜÂêà‰ø°ÊÅØÂíåÂΩ¢Áä∂ÈÄªËæëÁöÑÂÜÖÂÆπ„ÄÇÊâÄ‰ª•ÂæàÂ§öÊ∏∏ÊàèÈÉΩÂñúÊ¨¢Áî®OpenGLÔºàËøô‰∫õÊÉÖÂÜµ‰∏ãÔºåCore AnimationÁöÑÈôêÂà∂Â∞±ÊòéÊòæ‰∫ÜÔºöÂÆÉ‰ºòÂåñËøáÁöÑÂÜÖÂÆπÁ±ªÂûãÂπ∂‰∏ç‰∏ÄÂÆöËÉΩÊª°Ë∂≥ÈúÄÊ±ÇÔºâÔºå‰ΩÜÊòØËøôÊ†∑‰æùËµñÔºåÊñπ‰æøÁöÑÈ´òÂ∫¶ÊäΩË±°Êé•Âè£Â∞±Ê≤°‰∫Ü„ÄÇ
     
     Âú®iOS 5‰∏≠ÔºåËãπÊûúÂºïÂÖ•‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑÊ°ÜÊû∂Âè´ÂÅöGLKitÔºåÂÆÉÂéªÊéâ‰∫Ü‰∏Ä‰∫õËÆæÁΩÆOpenGLÁöÑÂ§çÊùÇÊÄßÔºåÊèê‰æõ‰∫Ü‰∏Ä‰∏™Âè´ÂÅö`CLKView`ÁöÑ`UIView`ÁöÑÂ≠êÁ±ªÔºåÂ∏Æ‰Ω†Â§ÑÁêÜÂ§ßÈÉ®ÂàÜÁöÑËÆæÁΩÆÂíåÁªòÂà∂Â∑•‰Ωú„ÄÇÂâçÊèêÊòØÂêÑÁßçÂêÑÊ†∑ÁöÑOpenGLÁªòÂõæÁºìÂÜ≤ÁöÑÂ∫ïÂ±ÇÂèØÈÖçÁΩÆÈ°π‰ªçÁÑ∂ÈúÄË¶Å‰Ω†Áî®`CAEAGLLayer`ÂÆåÊàêÔºåÂÆÉÊòØ`CALayer`ÁöÑ‰∏Ä‰∏™Â≠êÁ±ªÔºåÁî®Êù•ÊòæÁ§∫‰ªªÊÑèÁöÑOpenGLÂõæÂΩ¢„ÄÇ
     
     Â§ßÈÉ®ÂàÜÊÉÖÂÜµ‰∏ã‰Ω†ÈÉΩ‰∏çÈúÄË¶ÅÊâãÂä®ËÆæÁΩÆ`CAEAGLLayer`ÔºàÂÅáËÆæÁî®GLKViewÔºâÔºåËøáÂéªÁöÑÊó•Â≠êÂ∞±‰∏çË¶ÅÂÜçÊèê‰∫Ü„ÄÇÁâπÂà´ÁöÑÔºåÊàë‰ª¨Â∞ÜËÆæÁΩÆ‰∏Ä‰∏™OpenGL ES 2.0ÁöÑ‰∏ä‰∏ãÊñáÔºåÂÆÉÊòØÁé∞‰ª£ÁöÑiOSËÆæÂ§áÁöÑÊ†áÂáÜÂÅöÊ≥ï„ÄÇ
     
     Â∞ΩÁÆ°‰∏çÈúÄË¶ÅGLKit‰πüÂèØ‰ª•ÂÅöÂà∞Ëøô‰∏ÄÂàáÔºå‰ΩÜÊòØGLKitÂõäÊã¨‰∫ÜÂæàÂ§öÈ¢ùÂ§ñÁöÑÂ∑•‰ΩúÔºåÊØîÂ¶ÇËÆæÁΩÆÈ°∂ÁÇπÂíåÁâáÊÆµÁùÄËâ≤Âô®ÔºåËøô‰∫õÈÉΩ‰ª•Á±ªCËØ≠Ë®ÄÂè´ÂÅöGLSLËá™ÂåÖÂê´Âú®Á®ãÂ∫è‰∏≠ÔºåÂêåÊó∂Âú®ËøêË°åÊó∂ËΩΩÂÖ•Âà∞ÂõæÂΩ¢Á°¨‰ª∂‰∏≠„ÄÇÁºñÂÜôGLSL‰ª£Á†ÅÂíåËÆæÁΩÆ`EAGLayer`Ê≤°Êúâ‰ªÄ‰πàÂÖ≥Á≥ªÔºåÊâÄ‰ª•Êàë‰ª¨Â∞ÜÁî®`GLKBaseEffect`Á±ªÂ∞ÜÁùÄËâ≤ÈÄªËæëÊäΩË±°Âá∫Êù•„ÄÇÂÖ∂‰ªñÁöÑ‰∫ãÊÉÖÔºåÊàë‰ª¨ËøòÊòØ‰ºöÊúâ‰ª•ÂæÄÁöÑÊñπÂºè„ÄÇ
     
     Âú®ÂºÄÂßã‰πãÂâçÔºå‰Ω†ÈúÄË¶ÅÂ∞ÜGLKitÂíåOpenGLESÊ°ÜÊû∂Âä†ÂÖ•Âà∞‰Ω†ÁöÑÈ°πÁõÆ‰∏≠ÔºåÁÑ∂ÂêéÂ∞±ÂèØ‰ª•ÂÆûÁé∞Ê∏ÖÂçï6.14‰∏≠ÁöÑ‰ª£Á†ÅÔºåÈáåÈù¢ÊòØËÆæÁΩÆ‰∏Ä‰∏™`GAEAGLLayer`ÁöÑÊúÄÂ∞ëÂ∑•‰ΩúÔºåÂÆÉ‰ΩøÁî®‰∫ÜOpenGL ES 2.0 ÁöÑÁªòÂõæ‰∏ä‰∏ãÊñáÔºåÂπ∂Ê∏≤Êüì‰∫Ü‰∏Ä‰∏™ÊúâËâ≤‰∏âËßí
     */
#warning   Áï•Â§çÊùÇ„ÄÇÂêéÈù¢ÂÜçÁªÜÁúã
    
    [self.navigationController pushViewController:[[GAEGLLayer alloc] init] animated:YES];
    
}
- (void)addAVPlayerLayer{
//    NSURL *URL = [[NSBundle mainBundle] URLForResource:@"mp4" withExtension:@"mp4"];
   //ÁΩëÁªúËµÑÊ∫ê
        NSURL *net_URL = [NSURL URLWithString:@"http://baobab.wandoujia.com/api/v1/playUrl?vid=9264&editionType=default"];
        AVPlayer *player = [AVPlayer playerWithURL:net_URL];
    
//    Êú¨Âú∞
    NSString *path = [[NSBundle mainBundle]pathForResource:@"local" ofType:@"mov"];
    NSURL *URL = [NSURL fileURLWithPath:path];
    AVAsset *movieAsset = [AVURLAsset assetWithURL:URL];
    AVPlayerItem *playerItem = [AVPlayerItem playerItemWithAsset:movieAsset];
    player = [AVPlayer playerWithPlayerItem:playerItem];
    
    AVPlayerLayer *playerLayer = [AVPlayerLayer playerLayerWithPlayer:player];
    playerLayer.frame = self.backgroundView.bounds;
    playerLayer.videoGravity = AVLayerVideoGravityResizeAspect;
    [self.backgroundView.layer addSublayer:playerLayer];
    [playerLayer setPlayer:player];
    //play the video
    [player play];
    
}
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.dataSource.count;
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    static NSString *CELLIDE = @"ProprietaryTableCell";
    ProprietaryTableCell *cell = [tableView dequeueReusableCellWithIdentifier:CELLIDE];
    if (!cell) {
        cell = [[ProprietaryTableCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CELLIDE];
    }
    cell.infoLb.text = self.dataSource[indexPath.row];
    return cell;
}
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    return 0.01f;
}
- (NSMutableArray *)dataSource{
    if (!_dataSource) {
        _dataSource = [[NSMutableArray alloc]init];
    }
    return _dataSource;
}
- (UIScrollView *)scrollView{
    if (!_scrollView) {
        _scrollView = [[UIScrollView alloc]initWithFrame:self.backgroundView.bounds];
    }
    return _scrollView;
}
@end
